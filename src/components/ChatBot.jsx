import { useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import ThemeToggle from '../components/ThemeToggle';
import './Chatbot.css';
import { useAuth } from '../context/AuthContext';

// Helpers para storage por usuario
function loadHistory(userId) {
  try {
    const raw = localStorage.getItem(`chat_history:${userId}`);
    return raw ? JSON.parse(raw) : [];
  } catch {
    return [];
  }
}

function saveHistory(userId, messages) {
  try {
    localStorage.setItem(`chat_history:${userId}`, JSON.stringify(messages));
  } catch {
    // ignore
  }
}

// Perfil/memoria ligera
function loadProfile(userId) {
  try {
    const raw = localStorage.getItem(`chat_profile:${userId}`);
    return raw ? JSON.parse(raw) : {};
  } catch {
    return {};
  }
}

function saveProfile(userId, profile) {
  try {
    localStorage.setItem(
      `chat_profile:${userId}`,
      JSON.stringify({
        ...profile,
        ultimaActualizacion: new Date().toISOString(),
      })
    );
  } catch {
    // ignore
  }
}

// detectar informaci칩n personal b치sica
// ej: "me llamo Ana", "tengo 15 a침os"
function maybeExtractUserFacts(userMsgText, currentProfile) {
  const updated = { ...currentProfile };

  // nombre: "me llamo <nombre>"
  const nameMatch = userMsgText.match(/me llamo\s+([A-Za-z츼칄칈칍칔치칠칤칩칰침칌]+)\b/i);
  if (nameMatch) {
    updated.nombre = nameMatch[1];
  }

  // edad: "tengo 15 a침os", "tengo 16"
  const ageMatch = userMsgText.match(/tengo\s+(\d{1,2})\s*(a침os)?/i);
  if (ageMatch) {
    updated.edad = Number(ageMatch[1]);
  }

  return updated;
}

// Funci칩n para limpiar el historial del localStorage
function clearUserHistory(userId) {
  try {
    localStorage.removeItem(`chat_history:${userId}`);
    localStorage.removeItem(`chat_profile:${userId}`);
    console.log('Historial de conversaci칩n eliminado');
  } catch (error) {
    console.error('Error al limpiar historial:', error);
  }
}

// Funci칩n para enviar reporte de conversaci칩n
async function sendConversationReport(userId, options = {}) {
  const { useBeacon = false, keepalive = false } = options;
  
  try {
    if (useBeacon) {
      // Usar sendBeacon para env칤os al cerrar la p치gina (m치s confiable)
      const blob = new Blob(
        [JSON.stringify({ user_id: userId })],
        { type: 'application/json' }
      );
      navigator.sendBeacon(
        'https://us-central1-tera-bot-1ba7c.cloudfunctions.net/agente_generador_reporte',
        blob
      );
      console.log('Reporte enviado con sendBeacon');
    } else {
      // Usar fetch normal o con keepalive
      const response = await fetch(
        'https://us-central1-tera-bot-1ba7c.cloudfunctions.net/agente_generador_reporte',
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ user_id: userId }),
          ...(keepalive && { keepalive: true }),
        }
      );
      
      if (!response.ok) {
        console.error('Error al generar reporte:', response.status);
      } else {
        console.log('Reporte generado exitosamente');
      }
    }
  } catch (err) {
    console.error('Error al enviar reporte:', err);
  }
}

const ChatBot = () => {
  const navigate = useNavigate();
  const { user, logout } = useAuth();

  // obtenemos el user_id real desde el contexto
  const userId = user?.user_id || user?.id || null;

  const [messages, setMessages] = useState([]);
  const [profile, setProfile] = useState({});
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [conversationEnded, setConversationEnded] = useState(false);

  const chatRef = useRef(null);
  const inputRef = useRef(null);

  // cargar historial y perfil apenas tengamos userId
  useEffect(() => {
    if (!userId) return;
    const prevMsgs = loadHistory(userId);
    const prevProfile = loadProfile(userId);

    setMessages(prevMsgs);
    setProfile(prevProfile);
  }, [userId]);

  // guardar historial cada vez que cambian los mensajes
  useEffect(() => {
    if (!userId) return;
    saveHistory(userId, messages);
  }, [messages, userId]);

  // auto-scroll cuando llegan mensajes nuevos o est치 cargando
  useEffect(() => {
    if (chatRef.current) {
      chatRef.current.scrollTop = chatRef.current.scrollHeight;
    }
  }, [messages, isLoading]);

  // Limpiar y enviar reporte cuando el usuario salga de la p치gina sin usar "Terminar Conversaci칩n"
  useEffect(() => {
    const handleBeforeUnload = () => {
      if (!conversationEnded && userId && messages.length > 0) {
        // Enviar reporte al cerrar la p치gina usando sendBeacon (m치s confiable)
        sendConversationReport(userId, { useBeacon: true });
        clearUserHistory(userId);
      }
    };

    // Agregar listener para cuando se cierre la p치gina/pesta침a
    window.addEventListener('beforeunload', handleBeforeUnload);

    // Limpiar listener al desmontar el componente
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      
      // Tambi칠n ejecutar al desmontar (navegar a otra p치gina)
      if (!conversationEnded && userId && messages.length > 0) {
        sendConversationReport(userId, { keepalive: true });
        clearUserHistory(userId);
      }
    };
  }, [userId, messages.length, conversationEnded]);

  // terminar conversaci칩n: genera reporte en segundo plano y muestra mensaje
  const handleEndConversation = async () => {
    if (!userId) return;
    
    // Marcar que la conversaci칩n termin칩 correctamente
    setConversationEnded(true);
    
    // Agregar mensaje inmediatamente sin esperar
    setMessages(prev => [
      ...prev,
      {
        sender: 'bot',
        text: 'Gracias por compartir conmigo. Ha sido un placer acompa침arte en esta conversaci칩n 游눘\n\nTe recomiendo agendar una cita con la doctora para continuar con tu proceso. Puedes hacerlo desde el bot칩n "Agendar Cita" en la parte superior.',
      },
    ]);

    // Enviar reporte en segundo plano y limpiar historial despu칠s
    await sendConversationReport(userId);
    clearUserHistory(userId);
  };

  // cerrar sesi칩n real
  const handleLogout = () => {
    logout();           // limpia user en AuthContext
    navigate('/login'); // manda al login
  };

  // enviar mensaje al bot
  const handleSend = async () => {
    if (!input.trim() || isLoading) return;
    if (!userId) {
        setMessages(prev => [
          ...prev,
          { sender: 'bot', text: 'No se detect칩 tu sesi칩n. Por favor vuelve a iniciar sesi칩n.' },
        ]);
        return;
    }

    const userText = input.trim();

    // 1. agregamos mensaje del usuario
    const userMessage = { sender: 'user', text: userText };
    setMessages(prev => [...prev, userMessage]);

    // 2. intentamos extraer info personal y guardarla en profile
    const newProfile = maybeExtractUserFacts(userText, profile);
    if (JSON.stringify(newProfile) !== JSON.stringify(profile)) {
      setProfile(newProfile);
      saveProfile(userId, newProfile);
    }

    // 3. limpiamos input / seteamos loading
    setInput('');
    setIsLoading(true);

    try {
      // armamos payload para backend
      const payload = {
        messages: userText,
        user_id: userId,
        contexto_usuario: {
          nombre: newProfile.nombre || null,
          edad: newProfile.edad || null,
        },
      };

      console.log(
        "Enviando a /chat_agent:",
        JSON.stringify(payload, null, 2)
      );

      const response = await fetch(
        'https://us-central1-tera-bot-1ba7c.cloudfunctions.net/chat_agent',
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        }
      );

      if (!response.ok) {
        let errorDetails = `E:${response.status}`;
        try {
          const errorData = await response.json();
          errorDetails += `-${errorData.error || errorData.message || JSON.stringify(errorData)}`;
        } catch {
          try {
            const errorText = await response.text();
            errorDetails += `-${errorText}`;
          } catch {
            /* ignore */
          }
        }
        throw new Error(errorDetails);
      }

      const data = await response.json();
      console.log("Respuesta de la API:", data);

      let botText = null;
      if (data && data.respuesta_asistente) {
        botText = data.respuesta_asistente;
      } else if (data && data.reply) {
        botText = data.reply;
      } else {
        botText = "Lo siento, no entend칤 la respuesta del servidor.";
      }

      const botMessage = { sender: 'bot', text: botText };
      setMessages(prev => [...prev, botMessage]);

    } catch (err) {
      console.error("Error al conectar con la API:", err);
      setMessages(prev => [
        ...prev,
        {
          sender: 'bot',
          text: `Lo siento, hubo un error al procesar tu mensaje: ${err.message}`,
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  // Si entramos al chat sin userId por alguna raz칩n, mensaje seguro
  if (!userId) {
    return (
      <div className="chatbot-container">
        <div className="chat-window">
          <div className="message bot">
            No tienes una sesi칩n activa. Por favor inicia sesi칩n nuevamente.
          </div>
        </div>
        <div className="chat-input-area">
          <button
            className="chat-header-button chat-header-button-logout"
            onClick={() => navigate('/login')}
          >
            Ir al login
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="chatbot-container">
      <header className="chat-header">
        <span className="chat-header-title">
          {profile?.nombre
            ? `Hola ${profile.nombre} 游녦`
            : "Asistente Virtual"}
        </span>

        <div className="chat-header-actions">
          <Link
            to="/agendar-cita"
            className="chat-header-button chat-header-link-agendar"
          >
            Agendar Cita
          </Link>

          <button
            onClick={handleEndConversation}
            className="chat-header-button chat-header-button-terminar"
          >
            Terminar Conversaci칩n
          </button>

          <button
            onClick={handleLogout}
            className="chat-header-button chat-header-button-logout"
          >
            Cerrar Sesi칩n
          </button>

          <ThemeToggle className="theme-toggle-button" />
        </div>
      </header>

      <div ref={chatRef} className="chat-window">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`message-container ${
              msg.sender === 'user' ? 'user' : ''
            }`}
          >
            <div
              className={`message ${
                msg.sender === 'user' ? 'user' : 'bot'
              }`}
            >
              {typeof msg.text === 'string'
                ? msg.text.split('\n').map((line, i) => (
                    <p
                      key={i}
                      style={{ margin: 0, minHeight: '1em' }}
                    >
                      {line || '\u00A0'}
                    </p>
                  ))
                : <p>{JSON.stringify(msg.text)}</p>}
            </div>
          </div>
        ))}

        {isLoading && (
          <div className="loading-indicator">
            <div className="loading-dots">
              <div>
                <span></span>
                <span></span>
                <span></span>
              </div>
            </div>
          </div>
        )}
      </div>

      <div className="chat-input-area">
        <div className="chat-input-wrapper">
          <input
            ref={inputRef}
            type="text"
            className="chat-input"
            placeholder="Escribe tu mensaje..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && handleSend()}
            disabled={isLoading}
          />
          <button
            onClick={handleSend}
            disabled={isLoading}
            className="send-button"
          >
            {isLoading ? '...' : 'Enviar'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatBot;
